// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rotator.proto

/*
Package shackbus is a generated protocol buffer package.

It is generated from these files:
	rotator.proto

It has these top-level messages:
	None
	Error
	HeadingReq
	HeadingResp
	State
	Metadata
*/
package shackbus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type None struct {
}

func (m *None) Reset()                    { *m = None{} }
func (m *None) String() string            { return proto.CompactTextString(m) }
func (*None) ProtoMessage()               {}
func (*None) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Error struct {
	Error       string `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Code        int32  `protobuf:"varint,2,opt,name=code" json:"code,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Error) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type HeadingReq struct {
	Heading int32 `protobuf:"varint,1,opt,name=heading" json:"heading,omitempty"`
}

func (m *HeadingReq) Reset()                    { *m = HeadingReq{} }
func (m *HeadingReq) String() string            { return proto.CompactTextString(m) }
func (*HeadingReq) ProtoMessage()               {}
func (*HeadingReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HeadingReq) GetHeading() int32 {
	if m != nil {
		return m.Heading
	}
	return 0
}

type HeadingResp struct {
	Heading int32 `protobuf:"varint,1,opt,name=heading" json:"heading,omitempty"`
	Preset  int32 `protobuf:"varint,2,opt,name=preset" json:"preset,omitempty"`
}

func (m *HeadingResp) Reset()                    { *m = HeadingResp{} }
func (m *HeadingResp) String() string            { return proto.CompactTextString(m) }
func (*HeadingResp) ProtoMessage()               {}
func (*HeadingResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HeadingResp) GetHeading() int32 {
	if m != nil {
		return m.Heading
	}
	return 0
}

func (m *HeadingResp) GetPreset() int32 {
	if m != nil {
		return m.Preset
	}
	return 0
}

type State struct {
	Azimuth         int32 `protobuf:"varint,1,opt,name=azimuth" json:"azimuth,omitempty"`
	AzimuthPreset   int32 `protobuf:"varint,2,opt,name=azimuth_preset,json=azimuthPreset" json:"azimuth_preset,omitempty"`
	Elevation       int32 `protobuf:"varint,3,opt,name=elevation" json:"elevation,omitempty"`
	ElevationPreset int32 `protobuf:"varint,4,opt,name=elevation_preset,json=elevationPreset" json:"elevation_preset,omitempty"`
}

func (m *State) Reset()                    { *m = State{} }
func (m *State) String() string            { return proto.CompactTextString(m) }
func (*State) ProtoMessage()               {}
func (*State) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *State) GetAzimuth() int32 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

func (m *State) GetAzimuthPreset() int32 {
	if m != nil {
		return m.AzimuthPreset
	}
	return 0
}

func (m *State) GetElevation() int32 {
	if m != nil {
		return m.Elevation
	}
	return 0
}

func (m *State) GetElevationPreset() int32 {
	if m != nil {
		return m.ElevationPreset
	}
	return 0
}

type Metadata struct {
	AzimuthStop  int32 `protobuf:"varint,1,opt,name=azimuth_stop,json=azimuthStop" json:"azimuth_stop,omitempty"`
	AzimuthMin   int32 `protobuf:"varint,2,opt,name=azimuth_min,json=azimuthMin" json:"azimuth_min,omitempty"`
	AzimuthMax   int32 `protobuf:"varint,3,opt,name=azimuth_max,json=azimuthMax" json:"azimuth_max,omitempty"`
	ElevationMin int32 `protobuf:"varint,4,opt,name=elevation_min,json=elevationMin" json:"elevation_min,omitempty"`
	ElevationMax int32 `protobuf:"varint,5,opt,name=elevation_max,json=elevationMax" json:"elevation_max,omitempty"`
	HasAzimuth   bool  `protobuf:"varint,6,opt,name=has_azimuth,json=hasAzimuth" json:"has_azimuth,omitempty"`
	HasElevation bool  `protobuf:"varint,7,opt,name=has_elevation,json=hasElevation" json:"has_elevation,omitempty"`
}

func (m *Metadata) Reset()                    { *m = Metadata{} }
func (m *Metadata) String() string            { return proto.CompactTextString(m) }
func (*Metadata) ProtoMessage()               {}
func (*Metadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Metadata) GetAzimuthStop() int32 {
	if m != nil {
		return m.AzimuthStop
	}
	return 0
}

func (m *Metadata) GetAzimuthMin() int32 {
	if m != nil {
		return m.AzimuthMin
	}
	return 0
}

func (m *Metadata) GetAzimuthMax() int32 {
	if m != nil {
		return m.AzimuthMax
	}
	return 0
}

func (m *Metadata) GetElevationMin() int32 {
	if m != nil {
		return m.ElevationMin
	}
	return 0
}

func (m *Metadata) GetElevationMax() int32 {
	if m != nil {
		return m.ElevationMax
	}
	return 0
}

func (m *Metadata) GetHasAzimuth() bool {
	if m != nil {
		return m.HasAzimuth
	}
	return false
}

func (m *Metadata) GetHasElevation() bool {
	if m != nil {
		return m.HasElevation
	}
	return false
}

func init() {
	proto.RegisterType((*None)(nil), "shackbus.None")
	proto.RegisterType((*Error)(nil), "shackbus.Error")
	proto.RegisterType((*HeadingReq)(nil), "shackbus.HeadingReq")
	proto.RegisterType((*HeadingResp)(nil), "shackbus.HeadingResp")
	proto.RegisterType((*State)(nil), "shackbus.State")
	proto.RegisterType((*Metadata)(nil), "shackbus.Metadata")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Rotator service

type RotatorClient interface {
	SetAzimuth(ctx context.Context, in *HeadingReq, opts ...client.CallOption) (*None, error)
	SetElevation(ctx context.Context, in *HeadingReq, opts ...client.CallOption) (*None, error)
	StopAzimuth(ctx context.Context, in *None, opts ...client.CallOption) (*None, error)
	StopElevation(ctx context.Context, in *None, opts ...client.CallOption) (*None, error)
	GetMetadata(ctx context.Context, in *None, opts ...client.CallOption) (*Metadata, error)
	GetState(ctx context.Context, in *None, opts ...client.CallOption) (*State, error)
}

type rotatorClient struct {
	c           client.Client
	serviceName string
}

func NewRotatorClient(serviceName string, c client.Client) RotatorClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "shackbus"
	}
	return &rotatorClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *rotatorClient) SetAzimuth(ctx context.Context, in *HeadingReq, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.serviceName, "Rotator.SetAzimuth", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) SetElevation(ctx context.Context, in *HeadingReq, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.serviceName, "Rotator.SetElevation", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) StopAzimuth(ctx context.Context, in *None, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.serviceName, "Rotator.StopAzimuth", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) StopElevation(ctx context.Context, in *None, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.serviceName, "Rotator.StopElevation", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) GetMetadata(ctx context.Context, in *None, opts ...client.CallOption) (*Metadata, error) {
	req := c.c.NewRequest(c.serviceName, "Rotator.GetMetadata", in)
	out := new(Metadata)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorClient) GetState(ctx context.Context, in *None, opts ...client.CallOption) (*State, error) {
	req := c.c.NewRequest(c.serviceName, "Rotator.GetState", in)
	out := new(State)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rotator service

type RotatorHandler interface {
	SetAzimuth(context.Context, *HeadingReq, *None) error
	SetElevation(context.Context, *HeadingReq, *None) error
	StopAzimuth(context.Context, *None, *None) error
	StopElevation(context.Context, *None, *None) error
	GetMetadata(context.Context, *None, *Metadata) error
	GetState(context.Context, *None, *State) error
}

func RegisterRotatorHandler(s server.Server, hdlr RotatorHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Rotator{hdlr}, opts...))
}

type Rotator struct {
	RotatorHandler
}

func (h *Rotator) SetAzimuth(ctx context.Context, in *HeadingReq, out *None) error {
	return h.RotatorHandler.SetAzimuth(ctx, in, out)
}

func (h *Rotator) SetElevation(ctx context.Context, in *HeadingReq, out *None) error {
	return h.RotatorHandler.SetElevation(ctx, in, out)
}

func (h *Rotator) StopAzimuth(ctx context.Context, in *None, out *None) error {
	return h.RotatorHandler.StopAzimuth(ctx, in, out)
}

func (h *Rotator) StopElevation(ctx context.Context, in *None, out *None) error {
	return h.RotatorHandler.StopElevation(ctx, in, out)
}

func (h *Rotator) GetMetadata(ctx context.Context, in *None, out *Metadata) error {
	return h.RotatorHandler.GetMetadata(ctx, in, out)
}

func (h *Rotator) GetState(ctx context.Context, in *None, out *State) error {
	return h.RotatorHandler.GetState(ctx, in, out)
}

func init() { proto.RegisterFile("rotator.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xdf, 0x8a, 0xd3, 0x50,
	0x10, 0xc6, 0xc9, 0xda, 0xb4, 0xdd, 0x49, 0xb3, 0x2b, 0xc3, 0x22, 0x41, 0x04, 0x6b, 0x16, 0xa5,
	0x22, 0x56, 0x5c, 0xbd, 0x17, 0x2f, 0x96, 0xf5, 0x66, 0x45, 0x92, 0x07, 0x28, 0xb3, 0xed, 0x60,
	0x82, 0x6e, 0x4e, 0xcc, 0x99, 0x4a, 0xf1, 0x2d, 0x7c, 0x16, 0x1f, 0x50, 0x39, 0xc9, 0xf9, 0x63,
	0x2b, 0xa2, 0x77, 0xe7, 0xfb, 0xfa, 0x9b, 0x6f, 0xa6, 0xd3, 0x29, 0xa4, 0x9d, 0x12, 0x12, 0xd5,
	0x2d, 0xdb, 0x4e, 0x89, 0xc2, 0xa9, 0xae, 0x68, 0xfd, 0xe9, 0x66, 0xab, 0xf3, 0x31, 0x8c, 0xde,
	0xab, 0x86, 0xf3, 0x12, 0xe2, 0xcb, 0xae, 0x53, 0x1d, 0x9e, 0x41, 0xcc, 0xe6, 0x91, 0x45, 0xf3,
	0x68, 0x71, 0x5c, 0x0c, 0x02, 0x11, 0x46, 0x6b, 0xb5, 0xe1, 0xec, 0x68, 0x1e, 0x2d, 0xe2, 0xa2,
	0x7f, 0xe3, 0x1c, 0x92, 0x0d, 0xeb, 0x75, 0x57, 0xb7, 0x52, 0xab, 0x26, 0xbb, 0xd3, 0xf3, 0xbf,
	0x5b, 0xf9, 0x13, 0x80, 0x77, 0x4c, 0x9b, 0xba, 0xf9, 0x58, 0xf0, 0x17, 0xcc, 0x60, 0x52, 0x0d,
	0xaa, 0xcf, 0x8e, 0x0b, 0x27, 0xf3, 0x37, 0x90, 0x78, 0x4e, 0xb7, 0x7f, 0x07, 0xf1, 0x1e, 0x8c,
	0xdb, 0x8e, 0x35, 0x8b, 0x1d, 0xc4, 0xaa, 0xfc, 0x7b, 0x04, 0x71, 0x29, 0x24, 0x6c, 0x6a, 0xe9,
	0x5b, 0x7d, 0xbb, 0x95, 0xca, 0xd5, 0x5a, 0x89, 0x8f, 0xe1, 0xc4, 0x3e, 0x57, 0x7b, 0x19, 0xa9,
	0x75, 0x3f, 0xf4, 0x26, 0x3e, 0x80, 0x63, 0xfe, 0xcc, 0x5f, 0xc9, 0x7f, 0xa7, 0xb8, 0x08, 0x06,
	0x3e, 0x85, 0xbb, 0x5e, 0xb8, 0x98, 0x51, 0x0f, 0x9d, 0x7a, 0x7f, 0x08, 0xca, 0x7f, 0x46, 0x30,
	0xbd, 0x66, 0xa1, 0x0d, 0x09, 0xe1, 0x23, 0x98, 0xb9, 0xe6, 0x5a, 0x54, 0x6b, 0x67, 0x4b, 0xac,
	0x57, 0x8a, 0x6a, 0xf1, 0x21, 0x38, 0xb9, 0xba, 0xad, 0x1b, 0x3b, 0x1c, 0x58, 0xeb, 0xba, 0x6e,
	0xf6, 0x00, 0xda, 0xd9, 0xd9, 0x3c, 0x40, 0x3b, 0x3c, 0x87, 0x34, 0x0c, 0x67, 0x32, 0x86, 0xc9,
	0x66, 0xde, 0x34, 0x29, 0xfb, 0x10, 0xed, 0xb2, 0xf8, 0x10, 0xa2, 0x9d, 0x69, 0x55, 0x91, 0x5e,
	0xb9, 0x4d, 0x8e, 0xe7, 0xd1, 0x62, 0x5a, 0x40, 0x45, 0xfa, 0xad, 0x5d, 0xe6, 0x39, 0xa4, 0x06,
	0x08, 0x9b, 0x9a, 0xf4, 0xc8, 0xac, 0x22, 0x7d, 0xe9, 0xbc, 0x8b, 0x1f, 0x47, 0x30, 0x29, 0x86,
	0xbb, 0xc3, 0x0b, 0x80, 0x92, 0xc5, 0x95, 0x9f, 0x2d, 0xdd, 0x01, 0x2e, 0xc3, 0x81, 0xdc, 0x3f,
	0x09, 0xae, 0xb9, 0x49, 0x7c, 0x0d, 0xb3, 0x92, 0xc5, 0xe7, 0xfd, 0x67, 0xd5, 0x73, 0x48, 0xcc,
	0x3e, 0x5d, 0xab, 0x83, 0x8f, 0xff, 0xc0, 0x5f, 0x40, 0x6a, 0xf0, 0xd0, 0xe5, 0x5f, 0x05, 0x2f,
	0x21, 0xb9, 0x62, 0xf1, 0xbf, 0xec, 0x21, 0x8e, 0x41, 0x7b, 0xe6, 0x19, 0x4c, 0xaf, 0x58, 0x86,
	0x03, 0x3d, 0xe4, 0x4f, 0x83, 0xee, 0x81, 0x9b, 0x71, 0xff, 0x17, 0x7d, 0xf5, 0x2b, 0x00, 0x00,
	0xff, 0xff, 0xc7, 0x03, 0x36, 0xc2, 0xb3, 0x03, 0x00, 0x00,
}
