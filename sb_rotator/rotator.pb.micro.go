// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rotator.proto

package _

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Rotator service

func NewRotatorEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Rotator service

type RotatorService interface {
	SetAzimuth(ctx context.Context, in *HeadingReq, opts ...client.CallOption) (*None, error)
	SetElevation(ctx context.Context, in *HeadingReq, opts ...client.CallOption) (*None, error)
	StopAzimuth(ctx context.Context, in *None, opts ...client.CallOption) (*None, error)
	StopElevation(ctx context.Context, in *None, opts ...client.CallOption) (*None, error)
	GetMetadata(ctx context.Context, in *None, opts ...client.CallOption) (*Metadata, error)
	GetState(ctx context.Context, in *None, opts ...client.CallOption) (*State, error)
}

type rotatorService struct {
	c    client.Client
	name string
}

func NewRotatorService(name string, c client.Client) RotatorService {
	return &rotatorService{
		c:    c,
		name: name,
	}
}

func (c *rotatorService) SetAzimuth(ctx context.Context, in *HeadingReq, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.name, "Rotator.SetAzimuth", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorService) SetElevation(ctx context.Context, in *HeadingReq, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.name, "Rotator.SetElevation", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorService) StopAzimuth(ctx context.Context, in *None, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.name, "Rotator.StopAzimuth", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorService) StopElevation(ctx context.Context, in *None, opts ...client.CallOption) (*None, error) {
	req := c.c.NewRequest(c.name, "Rotator.StopElevation", in)
	out := new(None)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorService) GetMetadata(ctx context.Context, in *None, opts ...client.CallOption) (*Metadata, error) {
	req := c.c.NewRequest(c.name, "Rotator.GetMetadata", in)
	out := new(Metadata)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rotatorService) GetState(ctx context.Context, in *None, opts ...client.CallOption) (*State, error) {
	req := c.c.NewRequest(c.name, "Rotator.GetState", in)
	out := new(State)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rotator service

type RotatorHandler interface {
	SetAzimuth(context.Context, *HeadingReq, *None) error
	SetElevation(context.Context, *HeadingReq, *None) error
	StopAzimuth(context.Context, *None, *None) error
	StopElevation(context.Context, *None, *None) error
	GetMetadata(context.Context, *None, *Metadata) error
	GetState(context.Context, *None, *State) error
}

func RegisterRotatorHandler(s server.Server, hdlr RotatorHandler, opts ...server.HandlerOption) error {
	type rotator interface {
		SetAzimuth(ctx context.Context, in *HeadingReq, out *None) error
		SetElevation(ctx context.Context, in *HeadingReq, out *None) error
		StopAzimuth(ctx context.Context, in *None, out *None) error
		StopElevation(ctx context.Context, in *None, out *None) error
		GetMetadata(ctx context.Context, in *None, out *Metadata) error
		GetState(ctx context.Context, in *None, out *State) error
	}
	type Rotator struct {
		rotator
	}
	h := &rotatorHandler{hdlr}
	return s.Handle(s.NewHandler(&Rotator{h}, opts...))
}

type rotatorHandler struct {
	RotatorHandler
}

func (h *rotatorHandler) SetAzimuth(ctx context.Context, in *HeadingReq, out *None) error {
	return h.RotatorHandler.SetAzimuth(ctx, in, out)
}

func (h *rotatorHandler) SetElevation(ctx context.Context, in *HeadingReq, out *None) error {
	return h.RotatorHandler.SetElevation(ctx, in, out)
}

func (h *rotatorHandler) StopAzimuth(ctx context.Context, in *None, out *None) error {
	return h.RotatorHandler.StopAzimuth(ctx, in, out)
}

func (h *rotatorHandler) StopElevation(ctx context.Context, in *None, out *None) error {
	return h.RotatorHandler.StopElevation(ctx, in, out)
}

func (h *rotatorHandler) GetMetadata(ctx context.Context, in *None, out *Metadata) error {
	return h.RotatorHandler.GetMetadata(ctx, in, out)
}

func (h *rotatorHandler) GetState(ctx context.Context, in *None, out *State) error {
	return h.RotatorHandler.GetState(ctx, in, out)
}
